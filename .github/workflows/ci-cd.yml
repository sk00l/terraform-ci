name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

env:
  TERRAFORM_VERSION: "1.5.0"

  AWS_REGION: "us-east-1"

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform/ec2-project
          terraform init
          cd ../s3-project
          terraform init

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: TFLint
        run: |
          cd terraform/ec2-project
          tflint --init
          tflint
          cd ../s3-project
          tflint --init
          tflint

      - name: Comment TFLint results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## TFLint Results\nTFLint validation failed. Please fix the issues before merging.'
            })

      - name: Terraform Format Check
        run: |
          cd terraform/ec2-project
          terraform fmt -check -recursive
          cd ../s3-project
          terraform fmt -check -recursive

      - name: Comment Format results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Terraform Format Check\nTerraform formatting check failed. Please run `terraform fmt` to fix formatting issues.'
            })

      - name: Terraform Validate
        run: |
          cd terraform/ec2-project
          terraform validate
          cd ../s3-project
          terraform validate

      - name: Comment Validate results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Terraform Validate\nTerraform validation failed. Please fix the configuration errors.'
            })


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Terraform Init
        run: |
          cd terraform/ec2-project
          terraform init -reconfigure
          cd ../s3-project
          terraform init -reconfigure

      - name: Comment tfsec results
        uses: aquasecurity/tfsec-pr-commenter-action@v1.0.0
        with:
          github_token: ${{ github.token }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Terraform Init
        run: |
          cd terraform/ec2-project
          terraform init
          cd ../s3-project
          terraform init

      - name: Terraform Plan EC2
        id: plan-ec2
        run: |
          cd terraform/ec2-project
          terraform plan -out=ec2-plan.tfplan
          terraform show -json ec2-plan.tfplan > ec2-plan.json
        continue-on-error: true

      - name: Terraform Plan S3
        id: plan-s3
        run: |
          cd terraform/s3-project
          terraform plan -out=s3-plan.tfplan
          terraform show -json s3-plan.tfplan > s3-plan.json
        continue-on-error: true

      - name: Comment Plan results
        uses: actions/github-script@v7
        with:
          script: |
            const ec2Plan = '${{ steps.plan-ec2.outputs.stdout || 'No changes' }}';
            const s3Plan = '${{ steps.plan-s3.outputs.stdout || 'No changes' }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Results
            
            ### EC2 Project Changes:
            \`\`\`json
            ${ec2Plan}
            \`\`\`
            
            ### S3 Project Changes:
            \`\`\`json
            ${s3Plan}
            \`\`\``
            })

  build-artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: [lint, security-scan, plan]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(./scripts/version.sh)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create artifact
        run: |
          mkdir -p artifacts
          cp -r terraform artifacts/
          cp -r scripts artifacts/
          cp README.md artifacts/
          
          # Create zip file
          cd artifacts
          zip -r terraform-artifact-${{ steps.version.outputs.version }}.zip .
          cd ..
          
          # Upload artifact
          mv artifacts/terraform-artifact-${{ steps.version.outputs.version }}.zip terraform-artifact.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifact-${{ steps.version.outputs.version }}
          path: terraform-artifact.zip
          retention-days: 30

      - name: Comment artifact inffo
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            ## Build Artifact Created
            
            **Version:** ${{ steps.version.outputs.version }}
            **Artifact:** terraform-artifact-${{ steps.version.outputs.version }}.zip
            
            This artifact can be deployed to the dev environment for testing.

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(./scripts/version.sh)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ github.token }}
          default_bump: patch
          default_prerelease_bump: patch
          release_branches: main

      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ github.token }}
          automatic_release_tag: ${{ steps.version.outputs.version }}
          prerelease: false
          title: Release ${{ steps.version.outputs.version }}
          files: |
            terraform-artifact.zip

      - name: Create release artifact
        run: |
          mkdir -p release-artifacts
          cp -r terraform release-artifacts/
          cp -r scripts release-artifacts/
          cp README.md release-artifacts/
          
          # Create zip file
          cd release-artifacts
          zip -r terraform-release-${{ steps.version.outputs.version }}.zip .
          cd ..
          
          # Upload release artifact
          mv release-artifacts/terraform-release-${{ steps.version.outputs.version }}.zip terraform-release.zip

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-release-${{ steps.version.outputs.version }}
          path: terraform-release.zip
          retention-days: 90 