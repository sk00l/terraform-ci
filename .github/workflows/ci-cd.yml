name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

env:
  TERRAFORM_VERSION: "1.5.0"

  AWS_REGION: "us-east-1"

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform/ec2-project
          terraform init
          cd ../s3-project
          terraform init

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: TFLint
        run: |
          cd terraform/ec2-project
          tflint --init
          tflint
          cd ../s3-project
          tflint --init
          tflint

      - name: Comment TFLint results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## TFLint Results\nTFLint validation failed. Please fix the issues before merging.'
            })

      - name: Comment TFLint results
        if: failure()
        uses: mshick/add-pr-comment@v2.8.2
        with:
          message: |
            ## ❌ TFLint Failed
            TFLint validation failed. Please fix the issues before merging.
          repo-token: ${{ github.token }}
          allow-repeats: false


      - name: Comment TFLint results
        if: failure()
        uses: mshick/add-pr-comment@v2.8.2
        with:
          message: |
            ## ❌ TFLint Failed
            TFLint validation failed. Please fix the issues before merging.
          repo-token: ${{ github.token }}
          allow-repeats: false


      - name: Terraform Validate
        run: |
          cd terraform/ec2-project
          terraform validate
          cd ../s3-project
          terraform validate

      - name: Comment Terraform Validate
        if: failure()
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## ❌ Terraform Validate Failed
            Terraform validation failed. Please fix the configuration errors.
          repo-token: ${{ github.token }}
          allow-repeats: false



  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform/ec2-project
          terraform init -reconfigure
          cd ../s3-project
          terraform init -reconfigure

      - name: Run tfsec
        run: |
          curl -sL https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/
          tfsec --out=results.json --format=json --soft-fail terraform/

      - name: Run tfsec commenter
        run: |
          curl -sL https://github.com/aquasecurity/tfsec-pr-commenter-action/releases/download/v1.3.1/commenter-linux-amd64 -o commenter
          chmod +x commenter
          ./commenter
        env:
          INPUT_GITHUB_TOKEN: ${{ github.token }}



  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Plan EC2
        run: |
          cd terraform/ec2-project
          terraform init
          terraform plan -out=ec2-plan.tfplan
          terraform show -json ec2-plan.tfplan > ec2-plan.json

      - name: Terraform Plan S3
        run: |
          cd terraform/s3-project
          terraform init
          terraform plan -out=s3-plan.tfplan
          terraform show -json s3-plan.tfplan > s3-plan.json

      - name: Comment Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function readPlan(filePath) {
              try {
                return fs.readFileSync(filePath, 'utf8').substring(0, 60000);
              } catch (err) {
                return `⚠️ Failed to read ${filePath}: ${err.message}`;
              }
            }

            const ec2Plan = readPlan('terraform/ec2-project/ec2-plan.json');
            const s3Plan = readPlan('terraform/s3-project/s3-plan.json');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Results\n\n` +
                    `### EC2 Plan:\n\`\`\`json\n${ec2Plan}\n\`\`\`\n\n` +
                    `### S3 Plan:\n\`\`\`json\n${s3Plan}\n\`\`\``
            });



  build-artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: [lint, security-scan, plan]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(./scripts/version.sh)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create artifact
        run: |
          mkdir -p artifacts
          cp -r terraform artifacts/
          cp -r scripts artifacts/
          cp README.md artifacts/
          
          # Create zip file
          cd artifacts
          zip -r terraform-artifact-${{ steps.version.outputs.version }}.zip .
          cd ..
          
          # Upload artifact
          mv artifacts/terraform-artifact-${{ steps.version.outputs.version }}.zip terraform-artifact.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifact-${{ steps.version.outputs.version }}
          path: terraform-artifact.zip
          retention-days: 30

      - name: Comment artifact inffo
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            ## Build Artifact Created
            
            **Version:** ${{ steps.version.outputs.version }}
            **Artifact:** terraform-artifact-${{ steps.version.outputs.version }}.zip
            
            This artifact can be deployed to the dev environment for testing.
          repo-token: ${{ github.token }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Generate version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(./scripts/version.sh)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
  
      - name: Create release artifact
        run: |
          mkdir -p release-artifacts
          cp -r terraform release-artifacts/
          cp -r scripts release-artifacts/
          cp README.md release-artifacts/
  
          cd release-artifacts
          zip -r terraform-release-${{ steps.version.outputs.version }}.zip .
          cd ..
  
          mv release-artifacts/terraform-release-${{ steps.version.outputs.version }}.zip terraform-release.zip
  
      - name: Publish GitHub Release with Artifact
        run: |
          gh release create ${{ steps.version.outputs.version }} terraform-release.zip \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes "Automated release created by CI/CD pipeline." \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_RELEASE }}

  
      - name: Upload artifact for internal use (optional)
        uses: actions/upload-artifact@v4
        with:
          name: terraform-release-${{ steps.version.outputs.version }}
          path: terraform-release.zip
          retention-days: 90
